## NOTE: This workflow performs two kinds of checks:
## 1) a host-based mamba/conda environment check (setup-check)
## 2) a container build + check using the preparation/Dockerfile (container-check)
##
## Reasoning / inconsistency:
## - Local development on macOS typically uses conda/mamba and can leverage Apple MPS builds of PyTorch.
## - Containers built from this Dockerfile are Linux-based and are CPU-focused (no MPS). The container
##   therefore guarantees reproducibility for CI and demos, but will not reflect host-specific features
##   like MPS or GPU drivers. Keep local development for hardware-accelerated runs.
##
## Please see .github/CI_README.md for more details.

name: CI - env setup & smoke

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  setup-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Mambaforge (conda + mamba)
        shell: bash -l {0}
        run: |
          set -euo pipefail
          echo "Installing Mambaforge into runner..."
          ARCH="x86_64"
          INSTALLER="Miniforge3-Linux-${ARCH}.sh"
          curl -fsSL -o /tmp/${INSTALLER} https://github.com/conda-forge/miniforge/releases/latest/download/${INSTALLER}
          bash /tmp/${INSTALLER} -b -p $HOME/miniforge
          export PATH="$HOME/miniforge/bin:$PATH"
          source "$HOME/miniforge/etc/profile.d/conda.sh"
          conda create -n scrna -y python=3.10 || true
          conda activate scrna
          # install mamba into the environment
          conda install -n scrna -c conda-forge mamba -y || true

      - name: Create and activate env, install deps via mamba
        shell: bash -l {0}
        run: |
          set -euo pipefail
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda create -n scrna -y python=3.10 || true
          conda activate scrna
          # core scientific deps
          mamba install -y -c conda-forge scanpy anndata umap-learn python-igraph leidenalg pyyaml numpy pandas scikit-learn matplotlib
          # pytorch (CPU/MPS-friendly build selection)
          mamba install -y -c pytorch -c conda-forge pytorch torchvision torchaudio cpuonly || true

      - name: Run requirements check
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate scrna
          python scripts/check_requirements.py

      - name: Model smoke test
        shell: bash -l {0}
        run: |
          source "$(conda info --base)/etc/profile.d/conda.sh"
          conda activate scrna
          python - <<'PY'
          from src.scrna_longformer.model import SCRNALongformer
          import torch
          import numpy as np
          G=16
          model=SCRNALongformer(n_genes=G, n_classes=4)
          xb=torch.randn(2,G)
          mask=torch.ones(G,G,dtype=torch.bool)
          logits, emb = model(xb, mask)
          print('SMOKE OK', logits.shape, emb.shape)
          PY

  container-check:
    runs-on: ubuntu-latest
    needs: setup-check
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build preparation image (with cache)
        uses: docker/build-push-action@v4
        with:
          context: .
          file: preparation/Dockerfile
          push: false
          tags: scrna-longformer:ci
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run container check
        run: |
          docker run --rm scrna-longformer:ci python scripts/check_requirements.py
