## NOTE: This workflow performs two kinds of checks:
## 1) a host-based mamba/conda environment check (setup-check)
## 2) a container build + check using the preparation/Dockerfile (container-check)
##
## Reasoning / inconsistency:
## - Local development on macOS typically uses conda/mamba and can leverage Apple MPS builds of PyTorch.
## - Containers built from this Dockerfile are Linux-based and are CPU-focused (no MPS). The container
##   therefore guarantees reproducibility for CI and demos, but will not reflect host-specific features
##   like MPS or GPU drivers. Keep local development for hardware-accelerated runs.
##
## Please see .github/CI_README.md for more details.

name: Quick CI - smoke

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  quick-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache conda & pip caches
        uses: actions/cache@v4
        with:
          path: |
            $HOME/miniforge/pkgs
            $HOME/.cache/pip
          key: conda-pkgs-${{ runner.os }}-${{ hashFiles('requirements.txt','pyproject.toml') }}
          restore-keys: |
            conda-pkgs-${{ runner.os }}-

      - name: Install Miniforge
        shell: bash -l {0}
        run: |
          set -euo pipefail
          INSTALLER="Miniforge3-Linux-x86_64.sh"
          curl -fsSL -o /tmp/${INSTALLER} https://github.com/conda-forge/miniforge/releases/latest/download/${INSTALLER}
          bash /tmp/${INSTALLER} -b -p $HOME/miniforge
          export PATH="$HOME/miniforge/bin:$PATH"
          source "$HOME/miniforge/etc/profile.d/conda.sh"
          # install mamba into base for faster solves, then create env with mamba
          conda install -n base -c conda-forge -y mamba || true
          mamba create -n scrna -y python=3.10 || true
          conda activate scrna

      - name: Install minimal deps (fast)
        shell: bash -l {0}
        run: |
          source "$HOME/miniforge/etc/profile.d/conda.sh"
          conda activate scrna
          # use mamba for fast package installs
          mamba install -n scrna -y -c conda-forge numpy scikit-learn
          # Install PyTorch CPU build for smoke test
          mamba install -n scrna -y -c pytorch -c conda-forge pytorch cpuonly || true

      - name: Install local package (editable)
        shell: bash -l {0}
        run: |
          source "$HOME/miniforge/etc/profile.d/conda.sh"
          conda activate scrna
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install -e .

      - name: Model smoke test
        shell: bash -l {0}
        run: |
          source "$HOME/miniforge/etc/profile.d/conda.sh"
          conda activate scrna
          python - <<'PY'
          from scrna_longformer.model import SCRNALongformer
          import torch
          G=16
          model=SCRNALongformer(n_genes=G, n_classes=4)
          xb=torch.randn(2,G)
          mask=torch.ones(G,G,dtype=torch.bool)
          logits, emb = model(xb, mask)
          print('SMOKE OK', logits.shape, emb.shape)
          PY

      - name: Run unit tests (fast)
        shell: bash -l {0}
        run: |
          source "$HOME/miniforge/etc/profile.d/conda.sh"
          conda activate scrna
          # install pytest via mamba for consistent, fast solves
          mamba install -n scrna -y -c conda-forge pytest || python -m pip install pytest
          pytest -q tests/test_model.py

      - name: Run 1-epoch smoke training (fast)
        shell: bash -l {0}
        run: |
          source "$HOME/miniforge/etc/profile.d/conda.sh"
          conda activate scrna
          # prepare fast data artifact if not present
          python scripts/prepare_pbmc3k.py --fast --out data/pbmc3k_hvg_knn.npz
          # validate artifact before training
          python scripts/validate_data.py data/pbmc3k_hvg_knn.npz
          python scripts/train_classifier.py --fast --config configs/default.yaml
